# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:41:53+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class CreatedBy(BaseModel):
    id: Optional[str] = Field(None, examples=['6794760a-1f15-45cd-9c65-0dfe42f5135a'])
    object: Optional[str] = Field(None, examples=['user'])


class LastEditedBy(BaseModel):
    id: Optional[str] = Field(None, examples=['92a680bb-6970-4726-952b-4f4c03bff617'])
    object: Optional[str] = Field(None, examples=['user'])


class Annotations(BaseModel):
    bold: Optional[bool] = Field(None, examples=[False])
    code: Optional[bool] = Field(None, examples=[False])
    color: Optional[str] = Field(None, examples=['default'])
    italic: Optional[bool] = Field(None, examples=[False])
    strikethrough: Optional[bool] = Field(None, examples=[False])
    underline: Optional[bool] = Field(None, examples=[False])


class Text(BaseModel):
    content: Optional[str] = Field(None, examples=['hello to you'])
    link: Optional[Any] = Field(None, examples=[None])


class TextItem(BaseModel):
    annotations: Optional[Annotations] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(None, examples=['hello to you'])
    text: Optional[Text] = None
    type: Optional[str] = Field(None, examples=['text'])


class Paragraph(BaseModel):
    text: Optional[List[TextItem]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'hello to you',
                    'text': {'content': 'hello to you', 'link': None},
                    'type': 'text',
                }
            ]
        ],
    )


class V1BlocksIdDeleteResponse(BaseModel):
    archived: Optional[bool] = Field(None, examples=[True])
    created_by: Optional[CreatedBy] = None
    created_time: Optional[str] = Field(None, examples=['2021-08-06T17:46:00.000Z'])
    has_children: Optional[bool] = Field(None, examples=[False])
    id: Optional[str] = Field(None, examples=['4868767d-9029-4b9d-a41b-652ef4c9c7b9'])
    last_edited_by: Optional[LastEditedBy] = None
    last_edited_time: Optional[str] = Field(None, examples=['2022-02-24T22:26:00.000Z'])
    object: Optional[str] = Field(None, examples=['block'])
    paragraph: Optional[Paragraph] = None
    type: Optional[str] = Field(None, examples=['paragraph'])


class TextItem1(BaseModel):
    annotations: Optional[Annotations] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(None, examples=['hello to you'])
    text: Optional[Text] = None
    type: Optional[str] = Field(None, examples=['text'])


class Paragraph1(BaseModel):
    text: Optional[List[TextItem1]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'hello to you',
                    'text': {'content': 'hello to you', 'link': None},
                    'type': 'text',
                }
            ]
        ],
    )


class V1BlocksIdGetResponse(BaseModel):
    created_time: Optional[str] = Field(None, examples=['2021-08-06T17:46:00.000Z'])
    has_children: Optional[bool] = Field(None, examples=[False])
    id: Optional[str] = Field(None, examples=['4868767d-9029-4b9d-a41b-652ef4c9c7b9'])
    last_edited_time: Optional[str] = Field(None, examples=['2021-08-12T00:12:00.000Z'])
    object: Optional[str] = Field(None, examples=['block'])
    paragraph: Optional[Paragraph1] = None
    type: Optional[str] = Field(None, examples=['paragraph'])


class Text2(BaseModel):
    content: Optional[str] = Field(None, examples=['hello to you'])


class RichTextItem(BaseModel):
    text: Optional[Text2] = None
    type: Optional[str] = Field(None, examples=['text'])


class Paragraph2(BaseModel):
    rich_text: Optional[List[RichTextItem]] = Field(
        None, examples=[[{'text': {'content': 'hello to you'}, 'type': 'text'}]]
    )


class V1BlocksIdPatchRequest(BaseModel):
    paragraph: Optional[Paragraph2] = None


class Text3(BaseModel):
    content: Optional[str] = Field(None, examples=['hello to you'])
    link: Optional[Any] = Field(None, examples=[None])


class TextItem2(BaseModel):
    annotations: Optional[Annotations] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(None, examples=['hello to you'])
    text: Optional[Text3] = None
    type: Optional[str] = Field(None, examples=['text'])


class Paragraph3(BaseModel):
    text: Optional[List[TextItem2]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'hello to you',
                    'text': {'content': 'hello to you', 'link': None},
                    'type': 'text',
                }
            ]
        ],
    )


class V1BlocksIdPatchResponse(BaseModel):
    created_time: Optional[str] = Field(None, examples=['2021-08-06T17:46:00.000Z'])
    has_children: Optional[bool] = Field(None, examples=[False])
    id: Optional[str] = Field(None, examples=['4868767d-9029-4b9d-a41b-652ef4c9c7b9'])
    last_edited_time: Optional[str] = Field(None, examples=['2021-08-12T00:12:00.000Z'])
    object: Optional[str] = Field(None, examples=['block'])
    paragraph: Optional[Paragraph3] = None
    type: Optional[str] = Field(None, examples=['paragraph'])


class Text4(BaseModel):
    content: Optional[str] = Field(
        None,
        examples=[
            'I think we can all agree that Silicon Valley needs more adult supervision right about now.'
        ],
    )
    link: Optional[Any] = Field(None, examples=[None])


class TextItem3(BaseModel):
    annotations: Optional[Annotations] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(
        None,
        examples=[
            'I think we can all agree that Silicon Valley needs more adult supervision right about now.'
        ],
    )
    text: Optional[Text4] = None
    type: Optional[str] = Field(None, examples=['text'])


class Paragraph4(BaseModel):
    text: Optional[List[TextItem3]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'I think we can all agree that Silicon Valley needs more adult supervision right about now.',
                    'text': {
                        'content': 'I think we can all agree that Silicon Valley needs more adult supervision right about now.',
                        'link': None,
                    },
                    'type': 'text',
                }
            ]
        ],
    )


class Result(BaseModel):
    created_time: Optional[str] = Field(None, examples=['2021-04-27T20:38:19.437Z'])
    has_children: Optional[bool] = Field(None, examples=[False])
    id: Optional[str] = Field(None, examples=['48c1ffb5-2789-4025-937b-2c35eaaaab3f'])
    last_edited_time: Optional[str] = Field(None, examples=['2021-04-27T20:38:19.437Z'])
    object: Optional[str] = Field(None, examples=['block'])
    paragraph: Optional[Paragraph4] = None
    type: Optional[str] = Field(None, examples=['unsupported'])
    unsupported: Optional[Dict[str, Any]] = None


class V1BlocksIdChildrenGetResponse(BaseModel):
    has_more: Optional[bool] = Field(None, examples=[False])
    next_cursor: Optional[Any] = Field(None, examples=[None])
    object: Optional[str] = Field(None, examples=['list'])
    results: Optional[List[Result]] = Field(
        None,
        examples=[
            [
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '48c1ffb5-2789-4025-937b-2c35eaaaab3f',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'type': 'unsupported',
                    'unsupported': {},
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': 'e381a0a3-4efb-4ba9-aa93-45b70fa9ce7f',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'I think we can all agree that Silicon Valley needs more adult supervision right about now.',
                                'text': {
                                    'content': 'I think we can all agree that Silicon Valley needs more adult supervision right about now.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': 'ce5f79ac-8145-44ab-be3b-8ad143d6f8a7',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Is the solution for its companies to hire a chief ethics officer?',
                                'text': {
                                    'content': 'Is the solution for its companies to hire a chief ethics officer?',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '0387b374-7847-4ddc-bc53-6b0813ce4ed4',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'While some tech companies like Google have top compliance officers and others turn to legal teams to police themselves, no big tech companies that I know of have yet taken this step. But a lot of them seem to be talking about it, and I’ve discussed the idea with several chief executives recently. Why? Because slowly, then all at once, it feels like too many digital leaders have lost their minds.',
                                'text': {
                                    'content': 'While some tech companies like Google have top compliance officers and others turn to legal teams to police themselves, no big tech companies that I know of have yet taken this step. But a lot of them seem to be talking about it, and I’ve discussed the idea with several chief executives recently. Why? Because slowly, then all at once, it feels like too many digital leaders have lost their minds.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': 'da035311-5af3-48bc-8279-d28d9f4ef2e2',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'It’s probably no surprise, considering the complex problems the tech industry faces. As one ethical quandary after another has hit its profoundly ill-prepared executives, their once-pristine reputations have fallen like palm trees in a hurricane. These last two weeks alone show how tech is stumbling to react to big world issues armed with only bubble world skills:',
                                'text': {
                                    'content': 'It’s probably no surprise, considering the complex problems the tech industry faces. As one ethical quandary after another has hit its profoundly ill-prepared executives, their once-pristine reputations have fallen like palm trees in a hurricane. These last two weeks alone show how tech is stumbling to react to big world issues armed with only bubble world skills:',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '63a60fca-4a11-43eb-8773-c5f0164a3117',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'As a journalist is beheaded and dismembered at the direction of Saudi Arabian leaders (allegedly, but the killers did bring a bone saw), Silicon Valley is swimming in oceans of money from the kingdom’s Public Investment Fund. Saudi funding includes hundreds of millions for Magic Leap, and huge investments in hot public companies like Tesla. Most significantly: Saudis have invested about $45 billion in SoftBank’s giant Vision Fund, which has in turn doused the tech landscape — $4.4 billion to WeWork, $250 million to Slack, and $300 million to the dog-walking app Wag. In total Uber has gotten almost $14 billion, either through direct investments from the Public Investment Fund or through the Saudis’ funding of the Vision Fund. A billion here, a billion there and it all adds up.',
                                'text': {
                                    'content': 'As a journalist is beheaded and dismembered at the direction of Saudi Arabian leaders (allegedly, but the killers did bring a bone saw), Silicon Valley is swimming in oceans of money from the kingdom’s Public Investment Fund. Saudi funding includes hundreds of millions for Magic Leap, and huge investments in hot public companies like Tesla. Most significantly: Saudis have invested about $45 billion in SoftBank’s giant Vision Fund, which has in turn doused the tech landscape — $4.4 billion to WeWork, $250 million to Slack, and $300 million to the dog-walking app Wag. In total Uber has gotten almost $14 billion, either through direct investments from the Public Investment Fund or through the Saudis’ funding of the Vision Fund. A billion here, a billion there and it all adds up.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '8c58c8f1-86ae-4a14-b6b9-74f5fa579620',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': '[',
                                'text': {'content': '[', 'link': None},
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Kara Swisher answered your questions about her column ',
                                'text': {
                                    'content': 'Kara Swisher answered your questions about her column ',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': 'https://twitter.com/karaswisher/status/1054842303922298880',
                                'plain_text': 'on Twitter',
                                'text': {
                                    'content': 'on Twitter',
                                    'link': {
                                        'url': 'https://twitter.com/karaswisher/status/1054842303922298880'
                                    },
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': '.',
                                'text': {'content': '.', 'link': None},
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': ']',
                                'text': {'content': ']', 'link': None},
                                'type': 'text',
                            },
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '875d3aff-086b-45da-9ed1-bc3ddb185229',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Facebook introduced a new home video device called Portal, and promised that what could be seen as a surveillance tool would not share data for the sake of ad targeting. Soon after, as ',
                                'text': {
                                    'content': 'Facebook introduced a new home video device called Portal, and promised that what could be seen as a surveillance tool would not share data for the sake of ad targeting. Soon after, as ',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': 'https://www.recode.net/2018/10/16/17966102/facebook-portal-ad-targeting-data-collection',
                                'plain_text': 'reported by Recode',
                                'text': {
                                    'content': 'reported by Recode',
                                    'link': {
                                        'url': 'https://www.recode.net/2018/10/16/17966102/facebook-portal-ad-targeting-data-collection'
                                    },
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': ', Facebook admitted that “data about who you call and data about which apps you use on Portal ',
                                'text': {
                                    'content': ', Facebook admitted that “data about who you call and data about which apps you use on Portal ',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'can',
                                'text': {'content': 'can', 'link': None},
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': ' be used to target you with ads on other Facebook-owned properties.” Oh. Um. That’s awkward.',
                                'text': {
                                    'content': ' be used to target you with ads on other Facebook-owned properties.” Oh. Um. That’s awkward.',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '306ab0fb-6daa-4c5b-b1f7-f51a5f92b6ff',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'After agreeing to pay $20 million to the Securities and Exchange Commission for an ill-advised tweet about possible funding (from the Saudis, by the way), the Tesla co-founder Elon Musk proceeded to troll the regulatory agency on, you got it, Twitter. And even though the ',
                                'text': {
                                    'content': 'After agreeing to pay $20 million to the Securities and Exchange Commission for an ill-advised tweet about possible funding (from the Saudis, by the way), the Tesla co-founder Elon Musk proceeded to troll the regulatory agency on, you got it, Twitter. And even though the ',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': 'https://www.sec.gov/news/press-release/2018-226',
                                'plain_text': 'settlement called for some kind of control of his communications',
                                'text': {
                                    'content': 'settlement called for some kind of control of his communications',
                                    'link': {
                                        'url': 'https://www.sec.gov/news/press-release/2018-226'
                                    },
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': ', it appears that Mr. Musk will continue tweeting until someone steals his phone.',
                                'text': {
                                    'content': ', it appears that Mr. Musk will continue tweeting until someone steals his phone.',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '122b1457-4129-4513-abaa-7cce7d66e4a1',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Finally, Google took six months to make public that user data on its social network, Google Plus, ',
                                'text': {
                                    'content': 'Finally, Google took six months to make public that user data on its social network, Google Plus, ',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': 'https://www.nytimes.com/2018/10/08/technology/google-plus-security-disclosure.html?module=inline',
                                'plain_text': 'had been exposed',
                                'text': {
                                    'content': 'had been exposed',
                                    'link': {
                                        'url': 'https://www.nytimes.com/2018/10/08/technology/google-plus-security-disclosure.html?module=inline'
                                    },
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': ' and that profiles of up to 500,000 users may have been compromised. While the service failed long ago, because it was pretty much designed by antisocial people, this lack of concern for privacy was profound.',
                                'text': {
                                    'content': ' and that profiles of up to 500,000 users may have been compromised. While the service failed long ago, because it was pretty much designed by antisocial people, this lack of concern for privacy was profound.',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '4d4af599-556f-4d8b-af8e-4d01ebe2aa27',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Grappling with what to say and do about the disasters they themselves create is only the beginning. Then there are the broader issues that the denizens of Silicon Valley expect their employers to have a stance on: immigration, income inequality, artificial intelligence, automation, transgender rights, climate change, privacy, data rights and whether tech companies should be helping the government do controversial things. It’s an ethical swamp out there.',
                                'text': {
                                    'content': 'Grappling with what to say and do about the disasters they themselves create is only the beginning. Then there are the broader issues that the denizens of Silicon Valley expect their employers to have a stance on: immigration, income inequality, artificial intelligence, automation, transgender rights, climate change, privacy, data rights and whether tech companies should be helping the government do controversial things. It’s an ethical swamp out there.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': 'f5775df5-59eb-4533-a2cb-e150412ec4f6',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'That’s why, in a recent interview, Marc Benioff, the co-chief executive and a founder of Salesforce, told me he was in the process of hiring a chief ethical officer to help anticipate and address any thorny conundrums it might encounter as a business — like the decision it had to make a few months back about whether it should stop providing recruitment software for Customs and Border Protection because of the government’s policy of separating immigrant families at the border.',
                                'text': {
                                    'content': 'That’s why, in a recent interview, Marc Benioff, the co-chief executive and a founder of Salesforce, told me he was in the process of hiring a chief ethical officer to help anticipate and address any thorny conundrums it might encounter as a business — like the decision it had to make a few months back about whether it should stop providing recruitment software for Customs and Border Protection because of the government’s policy of separating immigrant families at the border.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '31405c6e-7ece-4667-8c4d-36c9d79a0bfa',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Amid much criticism, Mr. Benioff decided to keep the contract, but said he would focus more on social and political issues.',
                                'text': {
                                    'content': 'Amid much criticism, Mr. Benioff decided to keep the contract, but said he would focus more on social and political issues.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': 'a2ab7e8a-d521-401d-89ae-9eb27efb9990',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'At a recent company event, he elaborated: “We can have a structured conversation not just with our own employees myopically, but by bringing in the key advisers, supporters and pundits and philosophers and everybody necessary to ask the question if what we are doing today is ethical and humane.”',
                                'text': {
                                    'content': 'At a recent company event, he elaborated: “We can have a structured conversation not just with our own employees myopically, but by bringing in the key advisers, supporters and pundits and philosophers and everybody necessary to ask the question if what we are doing today is ethical and humane.”',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': 'a4498e1e-8b85-48d7-802a-db447ca7d1ac',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': '23andMe has also toyed with the idea of hiring a chief ethics officer. In an interview I did this week with its chief executive, Anne Wojcicki, she said the genetics company had even interviewed candidates, but that many of them wanted to remain in academia to be freer to ponder these issues. She acknowledged that the collection of DNA data is rife with ethical considerations, but said, “I think it has to be our management and leaders who have to add this to our skill set, rather than just hire one person to determine this.”',
                                'text': {
                                    'content': '23andMe has also toyed with the idea of hiring a chief ethics officer. In an interview I did this week with its chief executive, Anne Wojcicki, she said the genetics company had even interviewed candidates, but that many of them wanted to remain in academia to be freer to ponder these issues. She acknowledged that the collection of DNA data is rife with ethical considerations, but said, “I think it has to be our management and leaders who have to add this to our skill set, rather than just hire one person to determine this.”',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': 'cbf7e7e0-5552-4b3f-b09e-9dcca120931c',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'When asked about the idea of a single source of wisdom on ethics, some point out that legal or diversity/inclusion departments are designed for that purpose and that the ethics should really come from the top — the chief executive.',
                                'text': {
                                    'content': 'When asked about the idea of a single source of wisdom on ethics, some point out that legal or diversity/inclusion departments are designed for that purpose and that the ethics should really come from the top — the chief executive.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': 'd24b2887-0f1f-4e91-99c1-c295bed8ad65',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Also of concern is the possibility that a single person would not get listened to or, worse, get steamrollered. And, if the person was bad at the job, of course, it could drag the whole thing down.',
                                'text': {
                                    'content': 'Also of concern is the possibility that a single person would not get listened to or, worse, get steamrollered. And, if the person was bad at the job, of course, it could drag the whole thing down.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '78c55f65-c8b8-4364-a369-c40699968e90',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Others are more worried that the move would be nothing but window dressing. One consultant who focuses on ethics, but did not want to be named, told me: “We haven’t even defined ethics, so what even is ethical use, especially for Silicon Valley companies that are babies in this game?”',
                                'text': {
                                    'content': 'Others are more worried that the move would be nothing but window dressing. One consultant who focuses on ethics, but did not want to be named, told me: “We haven’t even defined ethics, so what even is ethical use, especially for Silicon Valley companies that are babies in this game?”',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '0b492111-1586-4a73-8848-04f0c391aadc',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'How can an industry that, unlike other business sectors, persistently promotes itself as doing good, learn to do that in reality? Do you want to not do harm, or do you want to do good? These are two totally different things.',
                                'text': {
                                    'content': 'How can an industry that, unlike other business sectors, persistently promotes itself as doing good, learn to do that in reality? Do you want to not do harm, or do you want to do good? These are two totally different things.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '302f8229-2404-460b-8c3c-e7058b4365e5',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'And how do you put an official ethical system in place without it seeming like you’re telling everyone how to behave? Who gets to decide those rules anyway, setting a moral path for the industry and — considering tech companies’ enormous power — the world.',
                                'text': {
                                    'content': 'And how do you put an official ethical system in place without it seeming like you’re telling everyone how to behave? Who gets to decide those rules anyway, setting a moral path for the industry and — considering tech companies’ enormous power — the world.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '8f9bc91c-5662-4b3f-a110-809f46b79f49',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': False,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Like I said, adult supervision. Or maybe, better still, Silicon Valley itself has to grow up.',
                                'text': {
                                    'content': 'Like I said, adult supervision. Or maybe, better still, Silicon Valley itself has to grow up.',
                                    'link': None,
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
                {
                    'created_time': '2021-04-27T20:38:19.437Z',
                    'has_children': False,
                    'id': '7bea1831-a25c-4b3e-8c9b-b37de814f948',
                    'last_edited_time': '2021-04-27T20:38:19.437Z',
                    'object': 'block',
                    'paragraph': {
                        'text': [
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': 'Follow The New York Times Opinion section on ',
                                'text': {
                                    'content': 'Follow The New York Times Opinion section on ',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': 'https://www.facebook.com/nytopinion',
                                'plain_text': 'Facebook',
                                'text': {
                                    'content': 'Facebook',
                                    'link': {
                                        'url': 'https://www.facebook.com/nytopinion'
                                    },
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': ', ',
                                'text': {'content': ', ', 'link': None},
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': 'http://twitter.com/NYTOpinion',
                                'plain_text': 'Twitter (@NYTopinion)',
                                'text': {
                                    'content': 'Twitter (@NYTopinion)',
                                    'link': {'url': 'http://twitter.com/NYTOpinion'},
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': ' and ',
                                'text': {'content': ' and ', 'link': None},
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': 'https://www.instagram.com/nytopinion/',
                                'plain_text': 'Instagram',
                                'text': {
                                    'content': 'Instagram',
                                    'link': {
                                        'url': 'https://www.instagram.com/nytopinion/'
                                    },
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': ', and sign up for the ',
                                'text': {
                                    'content': ', and sign up for the ',
                                    'link': None,
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': 'http://www.nytimes.com/newsletters/opiniontoday/',
                                'plain_text': 'Opinion Today newsletter',
                                'text': {
                                    'content': 'Opinion Today newsletter',
                                    'link': {
                                        'url': 'http://www.nytimes.com/newsletters/opiniontoday/'
                                    },
                                },
                                'type': 'text',
                            },
                            {
                                'annotations': {
                                    'bold': False,
                                    'code': False,
                                    'color': 'default',
                                    'italic': True,
                                    'strikethrough': False,
                                    'underline': False,
                                },
                                'href': None,
                                'plain_text': '.',
                                'text': {'content': '.', 'link': None},
                                'type': 'text',
                            },
                        ]
                    },
                    'type': 'paragraph',
                },
            ]
        ],
    )


class Text5(BaseModel):
    content: Optional[str] = Field(None, examples=['Lacinato kale'])


class TextItem4(BaseModel):
    text: Optional[Text5] = None
    type: Optional[str] = Field(None, examples=['text'])


class Heading2(BaseModel):
    text: Optional[List[TextItem4]] = Field(
        None, examples=[[{'text': {'content': 'Lacinato kale'}, 'type': 'text'}]]
    )


class Link(BaseModel):
    url: Optional[str] = Field(
        None, examples=['https://en.wikipedia.org/wiki/Lacinato_kale']
    )


class Text6(BaseModel):
    content: Optional[str] = Field(
        None,
        examples=[
            'Lacinato kale is a variety of kale with a long tradition in Italian cuisine, especially that of Tuscany. It is also known as Tuscan kale, Italian kale, dinosaur kale, kale, flat back kale, palm tree kale, or black Tuscan palm.'
        ],
    )
    link: Optional[Link] = None


class RichTextItem1(BaseModel):
    text: Optional[Text6] = None
    type: Optional[str] = Field(None, examples=['text'])


class Paragraph5(BaseModel):
    rich_text: Optional[List[RichTextItem1]] = Field(
        None,
        examples=[
            [
                {
                    'text': {
                        'content': 'Lacinato kale is a variety of kale with a long tradition in Italian cuisine, especially that of Tuscany. It is also known as Tuscan kale, Italian kale, dinosaur kale, kale, flat back kale, palm tree kale, or black Tuscan palm.',
                        'link': {'url': 'https://en.wikipedia.org/wiki/Lacinato_kale'},
                    },
                    'type': 'text',
                }
            ]
        ],
    )


class Child(BaseModel):
    heading_2: Optional[Heading2] = None
    object: Optional[str] = Field(None, examples=['block'])
    paragraph: Optional[Paragraph5] = None
    type: Optional[str] = Field(None, examples=['heading_2'])


class V1BlocksIdChildrenPatchRequest(BaseModel):
    children: Optional[List[Child]] = Field(
        None,
        examples=[
            [
                {
                    'heading_2': {
                        'text': [{'text': {'content': 'Lacinato kale'}, 'type': 'text'}]
                    },
                    'object': 'block',
                    'type': 'heading_2',
                },
                {
                    'object': 'block',
                    'paragraph': {
                        'rich_text': [
                            {
                                'text': {
                                    'content': 'Lacinato kale is a variety of kale with a long tradition in Italian cuisine, especially that of Tuscany. It is also known as Tuscan kale, Italian kale, dinosaur kale, kale, flat back kale, palm tree kale, or black Tuscan palm.',
                                    'link': {
                                        'url': 'https://en.wikipedia.org/wiki/Lacinato_kale'
                                    },
                                },
                                'type': 'text',
                            }
                        ]
                    },
                    'type': 'paragraph',
                },
            ]
        ],
    )


class ChildPage(BaseModel):
    title: Optional[str] = Field(
        None, examples=['Who Will Teach Silicon Valley to Be Ethical? ']
    )


class V1BlocksIdChildrenPatchResponse(BaseModel):
    child_page: Optional[ChildPage] = None
    created_time: Optional[str] = Field(None, examples=['2021-04-27T20:38:19.437Z'])
    has_children: Optional[bool] = Field(None, examples=[True])
    id: Optional[str] = Field(None, examples=['a1712d54-53e4-4893-a69d-4d581cd2c845'])
    last_edited_time: Optional[str] = Field(None, examples=['2021-05-12T06:07:37.724Z'])
    object: Optional[str] = Field(None, examples=['block'])
    type: Optional[str] = Field(None, examples=['child_page'])


class V1CommentsGetRequest(BaseModel):
    pass


class CreatedBy1(BaseModel):
    id: Optional[str] = Field(None, examples=['952f41bb-da96-4d36-9c2e-74924eee8ef1'])
    object: Optional[str] = Field(None, examples=['user'])


class Parent(BaseModel):
    block_id: Optional[str] = Field(
        None, examples=['5d4ca33c-d6b7-4675-93d9-84b70af45d1c']
    )
    type: Optional[str] = Field(None, examples=['block_id'])


class Text7(BaseModel):
    content: Optional[str] = Field(None, examples=['Please cite your source'])
    link: Optional[Any] = Field(None, examples=[None])


class RichTextItem2(BaseModel):
    annotations: Optional[Annotations] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(None, examples=['Please cite your source'])
    text: Optional[Text7] = None
    type: Optional[str] = Field(None, examples=['text'])


class Result1(BaseModel):
    created_by: Optional[CreatedBy1] = None
    created_time: Optional[str] = Field(None, examples=['2022-07-15T21:38:00.000Z'])
    discussion_id: Optional[str] = Field(
        None, examples=['ce18f8c6-ef2a-427f-b416-43531fc7c117']
    )
    id: Optional[str] = Field(None, examples=['ed4c62f2-c0ad-4081-b6b8-dad025637741'])
    last_edited_time: Optional[str] = Field(None, examples=['2022-07-15T21:38:00.000Z'])
    object: Optional[str] = Field(None, examples=['comment'])
    parent: Optional[Parent] = None
    rich_text: Optional[List[RichTextItem2]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'Please cite your source',
                    'text': {'content': 'Please cite your source', 'link': None},
                    'type': 'text',
                }
            ]
        ],
    )


class V1CommentsGetResponse(BaseModel):
    comment: Optional[Dict[str, Any]] = None
    has_more: Optional[bool] = Field(None, examples=[False])
    next_cursor: Optional[Any] = Field(None, examples=[None])
    object: Optional[str] = Field(None, examples=['list'])
    results: Optional[List[Result1]] = Field(
        None,
        examples=[
            [
                {
                    'created_by': {
                        'id': '952f41bb-da96-4d36-9c2e-74924eee8ef1',
                        'object': 'user',
                    },
                    'created_time': '2022-07-15T21:38:00.000Z',
                    'discussion_id': 'ce18f8c6-ef2a-427f-b416-43531fc7c117',
                    'id': 'ed4c62f2-c0ad-4081-b6b8-dad025637741',
                    'last_edited_time': '2022-07-15T21:38:00.000Z',
                    'object': 'comment',
                    'parent': {
                        'block_id': '5d4ca33c-d6b7-4675-93d9-84b70af45d1c',
                        'type': 'block_id',
                    },
                    'rich_text': [
                        {
                            'annotations': {
                                'bold': False,
                                'code': False,
                                'color': 'default',
                                'italic': False,
                                'strikethrough': False,
                                'underline': False,
                            },
                            'href': None,
                            'plain_text': 'Please cite your source',
                            'text': {
                                'content': 'Please cite your source',
                                'link': None,
                            },
                            'type': 'text',
                        }
                    ],
                },
                {
                    'created_by': {
                        'id': '952f41bb-da96-4d36-9c2e-74924eee8ef1',
                        'object': 'user',
                    },
                    'created_time': '2022-07-15T21:38:00.000Z',
                    'discussion_id': 'e63f446f-a84a-4cab-8f5a-b9e7779ecb67',
                    'id': '8949cb38-aee6-4c62-ba96-6ef7df9b4cf2',
                    'last_edited_time': '2022-07-15T21:38:00.000Z',
                    'object': 'comment',
                    'parent': {
                        'block_id': '5d4ca33c-d6b7-4675-93d9-84b70af45d1c',
                        'type': 'block_id',
                    },
                    'rich_text': [
                        {
                            'annotations': {
                                'bold': False,
                                'code': False,
                                'color': 'default',
                                'italic': False,
                                'strikethrough': False,
                                'underline': False,
                            },
                            'href': None,
                            'plain_text': 'What other nutrients does kale have?',
                            'text': {
                                'content': 'What other nutrients does kale have?',
                                'link': None,
                            },
                            'type': 'text',
                        }
                    ],
                },
                {
                    'created_by': {
                        'id': 'e450a39e-9051-4d36-bc4e-8581611fc592',
                        'object': 'user',
                    },
                    'created_time': '2022-07-18T21:48:00.000Z',
                    'discussion_id': 'ce18f8c6-ef2a-427f-b416-43531fc7c117',
                    'id': '6cd52483-6d55-4f8a-a724-4adb1c17ed43',
                    'last_edited_time': '2022-07-18T21:48:00.000Z',
                    'object': 'comment',
                    'parent': {
                        'block_id': '5d4ca33c-d6b7-4675-93d9-84b70af45d1c',
                        'type': 'block_id',
                    },
                    'rich_text': [
                        {
                            'annotations': {
                                'bold': False,
                                'code': False,
                                'color': 'default',
                                'italic': False,
                                'strikethrough': False,
                                'underline': False,
                            },
                            'href': 'https://www.healthline.com/nutrition/10-proven-benefits-of-kale',
                            'plain_text': 'https://www.healthline.com/nutrition/10-proven-benefits-of-kale',
                            'text': {
                                'content': 'https://www.healthline.com/nutrition/10-proven-benefits-of-kale',
                                'link': {
                                    'url': 'https://www.healthline.com/nutrition/10-proven-benefits-of-kale'
                                },
                            },
                            'type': 'text',
                        }
                    ],
                },
            ]
        ],
    )
    type: Optional[str] = Field(None, examples=['comment'])


class CreatedBy2(BaseModel):
    id: Optional[str] = Field(None, examples=['6794760a-1f15-45cd-9c65-0dfe42f5135a'])
    object: Optional[str] = Field(None, examples=['user'])


class LastEditedBy1(BaseModel):
    id: Optional[str] = Field(None, examples=['6794760a-1f15-45cd-9c65-0dfe42f5135a'])
    object: Optional[str] = Field(None, examples=['user'])


class Parent1(BaseModel):
    page_id: Optional[str] = Field(
        None, examples=['c4d39556-6364-46a1-8a61-ebbb668f7445']
    )
    type: Optional[str] = Field(None, examples=['page_id'])


class Option(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['15592971-7b30-43d5-9406-2eb69b13fcae'])
    name: Optional[str] = Field(None, examples=['Spencer Greenberg'])


class MultiSelect(BaseModel):
    options: Optional[List[Option]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': '15592971-7b30-43d5-9406-2eb69b13fcae',
                    'name': 'Spencer Greenberg',
                },
                {
                    'color': 'default',
                    'id': 'b80a988e-dccf-4f74-b764-6ca0e49ed1b8',
                    'name': 'Seth Stephens-Davidowitz',
                },
                {
                    'color': 'default',
                    'id': '0e71ee06-199d-46a4-834c-01084c8f76cb',
                    'name': 'Andrew Russell',
                },
                {
                    'color': 'default',
                    'id': '5807ec38-4879-4455-9f30-5352e90e8b79',
                    'name': 'Lee Vinsel',
                },
                {
                    'color': 'default',
                    'id': '4cf10a64-f3da-449c-8e04-ce6e338bbdbd',
                    'name': 'Megan Greenwell',
                },
                {
                    'color': 'default',
                    'id': '833e2c78-35ed-4601-badc-50c323341d76',
                    'name': 'Kara Swisher',
                },
                {
                    'color': 'default',
                    'id': '82e594e2-b1c5-4271-ac19-1a723a94a533',
                    'name': 'Paul Romer',
                },
                {
                    'color': 'default',
                    'id': 'ae3a2cbe-1fc9-4376-be35-331628b34623',
                    'name': 'Karen Swallow Prior',
                },
                {
                    'color': 'default',
                    'id': 'da068e78-dfe2-4434-9fd7-b7450b3e5830',
                    'name': 'Judith Shulevitz',
                },
            ]
        ],
    )


class Author(BaseModel):
    id: Optional[str] = Field(None, examples=['qNw_'])
    multi_select: Optional[MultiSelect] = None
    name: Optional[str] = Field(None, examples=['Author'])
    type: Optional[str] = Field(None, examples=['multi_select'])


class Link1(BaseModel):
    id: Optional[str] = Field(None, examples=['VVMi'])
    name: Optional[str] = Field(None, examples=['Link'])
    type: Optional[str] = Field(None, examples=['url'])
    url: Optional[Dict[str, Any]] = None


class Name(BaseModel):
    id: Optional[str] = Field(None, examples=['title'])
    name: Optional[str] = Field(None, examples=['Name'])
    title: Optional[Dict[str, Any]] = None
    type: Optional[str] = Field(None, examples=['title'])


class Option1(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['c5ee409a-f307-4176-99ee-6e424fa89afa'])
    name: Optional[str] = Field(None, examples=['NYT'])


class Select(BaseModel):
    options: Optional[List[Option1]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': 'c5ee409a-f307-4176-99ee-6e424fa89afa',
                    'name': 'NYT',
                },
                {
                    'color': 'blue',
                    'id': '1b9b0c0c-17b0-4292-ad12-1364a51849de',
                    'name': 'Netflix',
                },
                {
                    'color': 'brown',
                    'id': 'f3533637-278f-4501-b394-d9753bf3c101',
                    'name': 'Indie',
                },
                {
                    'color': 'yellow',
                    'id': 'e70d713c-4be4-4b40-a44d-fb413c8b9d7e',
                    'name': 'Bon Appetit',
                },
                {
                    'color': 'pink',
                    'id': '9c2bd667-0a10-4be4-a044-35a537a14ab9',
                    'name': 'Franklin Institute',
                },
                {
                    'color': 'orange',
                    'id': '6849b5f0-e641-4ec5-83cb-1ffe23011060',
                    'name': 'Springer',
                },
                {
                    'color': 'gray',
                    'id': '6a5bff63-a72d-4464-a5d0-1a601af2adf6',
                    'name': 'Emerald Group',
                },
                {
                    'color': 'red',
                    'id': '01f82d08-aa1f-4884-a4e0-3bc32f909ec4',
                    'name': 'The Atlantic',
                },
            ]
        ],
    )


class Publisher(BaseModel):
    id: Optional[str] = Field(None, examples=['%3E%24Pb'])
    name: Optional[str] = Field(None, examples=['Publisher'])
    select: Optional[Select] = None
    type: Optional[str] = Field(None, examples=['select'])


class PublishingReleaseDate(BaseModel):
    date: Optional[Dict[str, Any]] = None
    id: Optional[str] = Field(None, examples=['%3Fex%2B'])
    name: Optional[str] = Field(None, examples=['Publishing/Release Date'])
    type: Optional[str] = Field(None, examples=['date'])


class Read(BaseModel):
    checkbox: Optional[Dict[str, Any]] = None
    id: Optional[str] = Field(None, examples=['_MWJ'])
    name: Optional[str] = Field(None, examples=['Read'])
    type: Optional[str] = Field(None, examples=['checkbox'])


class Option2(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['5c944de7-3f4b-4567-b3a1-fa2c71c540b6'])
    name: Optional[str] = Field(None, examples=['⭐️⭐️⭐️⭐️⭐️'])


class Select1(BaseModel):
    options: Optional[List[Option2]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': '5c944de7-3f4b-4567-b3a1-fa2c71c540b6',
                    'name': '⭐️⭐️⭐️⭐️⭐️',
                },
                {
                    'color': 'default',
                    'id': 'b7307e35-c80a-4cb5-bb6b-6054523b394a',
                    'name': '⭐️⭐️⭐️⭐️',
                },
                {
                    'color': 'default',
                    'id': '9b1e1349-8e24-40ba-bbca-84a61296bc81',
                    'name': '⭐️⭐️⭐️',
                },
                {
                    'color': 'default',
                    'id': '66d3d050-086c-4a91-8c56-d55dc67e7789',
                    'name': '⭐️⭐️',
                },
                {
                    'color': 'default',
                    'id': 'd3782c76-0396-467f-928e-46bf0c9d5fba',
                    'name': '⭐️',
                },
            ]
        ],
    )


class Score5(BaseModel):
    id: Optional[str] = Field(None, examples=[')Y7%22'])
    name: Optional[str] = Field(None, examples=['Score /5'])
    select: Optional[Select1] = None
    type: Optional[str] = Field(None, examples=['select'])


class Option3(BaseModel):
    color: Optional[str] = Field(None, examples=['yellow'])
    id: Optional[str] = Field(None, examples=['8c4a056e-6709-4dd1-ba58-d34d9480855a'])
    name: Optional[str] = Field(None, examples=['Ready to Start'])


class Select2(BaseModel):
    options: Optional[List[Option3]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'yellow',
                    'id': '8c4a056e-6709-4dd1-ba58-d34d9480855a',
                    'name': 'Ready to Start',
                },
                {
                    'color': 'red',
                    'id': '5925ba22-0126-4b58-90c7-b8bbb2c3c895',
                    'name': 'Reading',
                },
                {
                    'color': 'blue',
                    'id': '59aa9043-07b4-4bf4-8734-3164b13af44a',
                    'name': 'Finished',
                },
                {
                    'color': 'red',
                    'id': 'f961978d-02eb-4998-933a-33c2ec378564',
                    'name': 'Listening',
                },
                {
                    'color': 'red',
                    'id': '1d450853-b27a-45e2-979f-448aa1bd35de',
                    'name': 'Watching',
                },
            ]
        ],
    )


class Status(BaseModel):
    id: Optional[str] = Field(None, examples=['%60zz5'])
    name: Optional[str] = Field(None, examples=['Status'])
    select: Optional[Select2] = None
    type: Optional[str] = Field(None, examples=['select'])


class Summary(BaseModel):
    id: Optional[str] = Field(None, examples=['%3F%5C25'])
    name: Optional[str] = Field(None, examples=['Summary'])
    rich_text: Optional[Dict[str, Any]] = None
    type: Optional[str] = Field(None, examples=['rich_text'])


class Option4(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['f96d0d0a-5564-4a20-ab15-5f040d49759e'])
    name: Optional[str] = Field(None, examples=['Article'])


class Select3(BaseModel):
    options: Optional[List[Option4]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': 'f96d0d0a-5564-4a20-ab15-5f040d49759e',
                    'name': 'Article',
                },
                {
                    'color': 'default',
                    'id': '4ac85597-5db1-4e0a-9c02-445575c38f76',
                    'name': 'TV Series',
                },
                {
                    'color': 'default',
                    'id': '2991748a-5745-4c3b-9c9b-2d6846a6fa1f',
                    'name': 'Film',
                },
                {
                    'color': 'default',
                    'id': '82f3bace-be25-410d-87fe-561c9c22492f',
                    'name': 'Podcast',
                },
                {
                    'color': 'default',
                    'id': '861f1076-1cc4-429a-a781-54947d727a4a',
                    'name': 'Academic Journal',
                },
                {
                    'color': 'default',
                    'id': '9cc30548-59d6-4cd3-94bc-d234081525c4',
                    'name': 'Essay Resource',
                },
            ]
        ],
    )


class Type(BaseModel):
    id: Optional[str] = Field(None, examples=['%2F7eo'])
    name: Optional[str] = Field(None, examples=['Type'])
    select: Optional[Select3] = None
    type: Optional[str] = Field(None, examples=['select'])


class Properties(BaseModel):
    Author_1: Optional[Author] = Field(None, alias='Author')
    Link: Optional[Link1] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Publisher_1: Optional[Publisher] = Field(None, alias='Publisher')
    Publishing_Release_Date: Optional[PublishingReleaseDate] = Field(
        None, alias='Publishing/Release Date'
    )
    Read_1: Optional[Read] = Field(None, alias='Read')
    Score__5: Optional[Score5] = Field(None, alias='Score /5')
    Status_1: Optional[Status] = Field(None, alias='Status')
    Summary_1: Optional[Summary] = Field(None, alias='Summary')
    Type_1: Optional[Type] = Field(None, alias='Type')


class Text8(BaseModel):
    content: Optional[str] = Field(None, examples=['Ever Better Reading List Title'])
    link: Optional[Any] = Field(None, examples=[None])


class TitleItem(BaseModel):
    annotations: Optional[Annotations] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(None, examples=['Ever Better Reading List Title'])
    text: Optional[Text8] = None
    type: Optional[str] = Field(None, examples=['text'])


class V1DatabasesIdGetResponse(BaseModel):
    archived: Optional[bool] = Field(None, examples=[False])
    cover: Optional[Any] = Field(None, examples=[None])
    created_by: Optional[CreatedBy2] = None
    created_time: Optional[str] = Field(None, examples=['2021-04-27T20:38:00.000Z'])
    icon: Optional[Any] = Field(None, examples=[None])
    id: Optional[str] = Field(None, examples=['8e2c2b76-9e1d-47d2-87b9-ed3035d607ae'])
    last_edited_by: Optional[LastEditedBy1] = None
    last_edited_time: Optional[str] = Field(None, examples=['2022-02-24T22:14:00.000Z'])
    object: Optional[str] = Field(None, examples=['database'])
    parent: Optional[Parent1] = None
    properties: Optional[Properties] = None
    title: Optional[List[TitleItem]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'Ever Better Reading List Title',
                    'text': {'content': 'Ever Better Reading List Title', 'link': None},
                    'type': 'text',
                }
            ]
        ],
    )
    url: Optional[str] = Field(
        None, examples=['https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae']
    )


class WinePairing(BaseModel):
    rich_text: Optional[Dict[str, Any]] = None


class Properties1(BaseModel):
    Wine_Pairing: Optional[WinePairing] = Field(None, alias='Wine Pairing')


class Text9(BaseModel):
    content: Optional[str] = Field(None, examples=['Ever Better Reading List Title'])


class TitleItem1(BaseModel):
    text: Optional[Text9] = None


class V1DatabasesIdPatchRequest(BaseModel):
    properties: Optional[Properties1] = None
    title: Optional[List[TitleItem1]] = Field(
        None, examples=[[{'text': {'content': 'Ever Better Reading List Title'}}]]
    )


class LastEditedBy2(BaseModel):
    id: Optional[str] = Field(None, examples=['92a680bb-6970-4726-952b-4f4c03bff617'])
    object: Optional[str] = Field(None, examples=['user'])


class Option5(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['15592971-7b30-43d5-9406-2eb69b13fcae'])
    name: Optional[str] = Field(None, examples=['Spencer Greenberg'])


class MultiSelect1(BaseModel):
    options: Optional[List[Option5]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': '15592971-7b30-43d5-9406-2eb69b13fcae',
                    'name': 'Spencer Greenberg',
                },
                {
                    'color': 'default',
                    'id': 'b80a988e-dccf-4f74-b764-6ca0e49ed1b8',
                    'name': 'Seth Stephens-Davidowitz',
                },
                {
                    'color': 'default',
                    'id': '0e71ee06-199d-46a4-834c-01084c8f76cb',
                    'name': 'Andrew Russell',
                },
                {
                    'color': 'default',
                    'id': '5807ec38-4879-4455-9f30-5352e90e8b79',
                    'name': 'Lee Vinsel',
                },
                {
                    'color': 'default',
                    'id': '4cf10a64-f3da-449c-8e04-ce6e338bbdbd',
                    'name': 'Megan Greenwell',
                },
                {
                    'color': 'default',
                    'id': '833e2c78-35ed-4601-badc-50c323341d76',
                    'name': 'Kara Swisher',
                },
                {
                    'color': 'default',
                    'id': '82e594e2-b1c5-4271-ac19-1a723a94a533',
                    'name': 'Paul Romer',
                },
                {
                    'color': 'default',
                    'id': 'ae3a2cbe-1fc9-4376-be35-331628b34623',
                    'name': 'Karen Swallow Prior',
                },
                {
                    'color': 'default',
                    'id': 'da068e78-dfe2-4434-9fd7-b7450b3e5830',
                    'name': 'Judith Shulevitz',
                },
            ]
        ],
    )


class Author1(BaseModel):
    id: Optional[str] = Field(None, examples=['qNw_'])
    multi_select: Optional[MultiSelect1] = None
    name: Optional[str] = Field(None, examples=['Author'])
    type: Optional[str] = Field(None, examples=['multi_select'])


class Option6(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['c5ee409a-f307-4176-99ee-6e424fa89afa'])
    name: Optional[str] = Field(None, examples=['NYT'])


class Select4(BaseModel):
    options: Optional[List[Option6]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': 'c5ee409a-f307-4176-99ee-6e424fa89afa',
                    'name': 'NYT',
                },
                {
                    'color': 'blue',
                    'id': '1b9b0c0c-17b0-4292-ad12-1364a51849de',
                    'name': 'Netflix',
                },
                {
                    'color': 'brown',
                    'id': 'f3533637-278f-4501-b394-d9753bf3c101',
                    'name': 'Indie',
                },
                {
                    'color': 'yellow',
                    'id': 'e70d713c-4be4-4b40-a44d-fb413c8b9d7e',
                    'name': 'Bon Appetit',
                },
                {
                    'color': 'pink',
                    'id': '9c2bd667-0a10-4be4-a044-35a537a14ab9',
                    'name': 'Franklin Institute',
                },
                {
                    'color': 'orange',
                    'id': '6849b5f0-e641-4ec5-83cb-1ffe23011060',
                    'name': 'Springer',
                },
                {
                    'color': 'gray',
                    'id': '6a5bff63-a72d-4464-a5d0-1a601af2adf6',
                    'name': 'Emerald Group',
                },
                {
                    'color': 'red',
                    'id': '01f82d08-aa1f-4884-a4e0-3bc32f909ec4',
                    'name': 'The Atlantic',
                },
            ]
        ],
    )


class Publisher1(BaseModel):
    id: Optional[str] = Field(None, examples=['>$Pb'])
    name: Optional[str] = Field(None, examples=['Publisher'])
    select: Optional[Select4] = None
    type: Optional[str] = Field(None, examples=['select'])


class PublishingReleaseDate1(BaseModel):
    date: Optional[Dict[str, Any]] = None
    id: Optional[str] = Field(None, examples=['?ex+'])
    name: Optional[str] = Field(None, examples=['Publishing/Release Date'])
    type: Optional[str] = Field(None, examples=['date'])


class Option7(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['5c944de7-3f4b-4567-b3a1-fa2c71c540b6'])
    name: Optional[str] = Field(None, examples=['⭐️⭐️⭐️⭐️⭐️'])


class Select5(BaseModel):
    options: Optional[List[Option7]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': '5c944de7-3f4b-4567-b3a1-fa2c71c540b6',
                    'name': '⭐️⭐️⭐️⭐️⭐️',
                },
                {
                    'color': 'default',
                    'id': 'b7307e35-c80a-4cb5-bb6b-6054523b394a',
                    'name': '⭐️⭐️⭐️⭐️',
                },
                {
                    'color': 'default',
                    'id': '9b1e1349-8e24-40ba-bbca-84a61296bc81',
                    'name': '⭐️⭐️⭐️',
                },
                {
                    'color': 'default',
                    'id': '66d3d050-086c-4a91-8c56-d55dc67e7789',
                    'name': '⭐️⭐️',
                },
                {
                    'color': 'default',
                    'id': 'd3782c76-0396-467f-928e-46bf0c9d5fba',
                    'name': '⭐️',
                },
            ]
        ],
    )


class Score51(BaseModel):
    id: Optional[str] = Field(None, examples=[')Y7"'])
    name: Optional[str] = Field(None, examples=['Score /5'])
    select: Optional[Select5] = None
    type: Optional[str] = Field(None, examples=['select'])


class Option8(BaseModel):
    color: Optional[str] = Field(None, examples=['yellow'])
    id: Optional[str] = Field(None, examples=['8c4a056e-6709-4dd1-ba58-d34d9480855a'])
    name: Optional[str] = Field(None, examples=['Ready to Start'])


class Select6(BaseModel):
    options: Optional[List[Option8]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'yellow',
                    'id': '8c4a056e-6709-4dd1-ba58-d34d9480855a',
                    'name': 'Ready to Start',
                },
                {
                    'color': 'red',
                    'id': '5925ba22-0126-4b58-90c7-b8bbb2c3c895',
                    'name': 'Reading',
                },
                {
                    'color': 'blue',
                    'id': '59aa9043-07b4-4bf4-8734-3164b13af44a',
                    'name': 'Finished',
                },
                {
                    'color': 'red',
                    'id': 'f961978d-02eb-4998-933a-33c2ec378564',
                    'name': 'Listening',
                },
                {
                    'color': 'red',
                    'id': '1d450853-b27a-45e2-979f-448aa1bd35de',
                    'name': 'Watching',
                },
            ]
        ],
    )


class Status1(BaseModel):
    id: Optional[str] = Field(None, examples=['`zz5'])
    name: Optional[str] = Field(None, examples=['Status'])
    select: Optional[Select6] = None
    type: Optional[str] = Field(None, examples=['select'])


class Summary1(BaseModel):
    id: Optional[str] = Field(None, examples=['?\\25'])
    name: Optional[str] = Field(None, examples=['Summary'])
    rich_text: Optional[Dict[str, Any]] = None
    type: Optional[str] = Field(None, examples=['rich_text'])


class Option9(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['f96d0d0a-5564-4a20-ab15-5f040d49759e'])
    name: Optional[str] = Field(None, examples=['Article'])


class Select7(BaseModel):
    options: Optional[List[Option9]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': 'f96d0d0a-5564-4a20-ab15-5f040d49759e',
                    'name': 'Article',
                },
                {
                    'color': 'default',
                    'id': '4ac85597-5db1-4e0a-9c02-445575c38f76',
                    'name': 'TV Series',
                },
                {
                    'color': 'default',
                    'id': '2991748a-5745-4c3b-9c9b-2d6846a6fa1f',
                    'name': 'Film',
                },
                {
                    'color': 'default',
                    'id': '82f3bace-be25-410d-87fe-561c9c22492f',
                    'name': 'Podcast',
                },
                {
                    'color': 'default',
                    'id': '861f1076-1cc4-429a-a781-54947d727a4a',
                    'name': 'Academic Journal',
                },
                {
                    'color': 'default',
                    'id': '9cc30548-59d6-4cd3-94bc-d234081525c4',
                    'name': 'Essay Resource',
                },
            ]
        ],
    )


class Type1(BaseModel):
    id: Optional[str] = Field(None, examples=['/7eo'])
    name: Optional[str] = Field(None, examples=['Type'])
    select: Optional[Select7] = None
    type: Optional[str] = Field(None, examples=['select'])


class WinePairing1(BaseModel):
    id: Optional[str] = Field(None, examples=['Y=H]'])
    name: Optional[str] = Field(None, examples=['Wine Pairing'])
    rich_text: Optional[Dict[str, Any]] = None
    type: Optional[str] = Field(None, examples=['rich_text'])


class Properties2(BaseModel):
    Author: Optional[Author1] = None
    Link: Optional[Link1] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Publisher: Optional[Publisher1] = None
    Publishing_Release_Date: Optional[PublishingReleaseDate1] = Field(
        None, alias='Publishing/Release Date'
    )
    Read_1: Optional[Read] = Field(None, alias='Read')
    Score__5: Optional[Score51] = Field(None, alias='Score /5')
    Status: Optional[Status1] = None
    Summary: Optional[Summary1] = None
    Type: Optional[Type1] = None
    Wine_Pairing: Optional[WinePairing1] = Field(None, alias='Wine Pairing')


class Text10(BaseModel):
    content: Optional[str] = Field(None, examples=['Ever Better Reading List Title'])
    link: Optional[Any] = Field(None, examples=[None])


class TitleItem2(BaseModel):
    annotations: Optional[Annotations] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(None, examples=['Ever Better Reading List Title'])
    text: Optional[Text10] = None
    type: Optional[str] = Field(None, examples=['text'])


class V1DatabasesIdPatchResponse(BaseModel):
    archived: Optional[bool] = Field(None, examples=[False])
    cover: Optional[Any] = Field(None, examples=[None])
    created_by: Optional[CreatedBy2] = None
    created_time: Optional[str] = Field(None, examples=['2021-04-27T20:38:00.000Z'])
    icon: Optional[Any] = Field(None, examples=[None])
    id: Optional[str] = Field(None, examples=['8e2c2b76-9e1d-47d2-87b9-ed3035d607ae'])
    last_edited_by: Optional[LastEditedBy2] = None
    last_edited_time: Optional[str] = Field(None, examples=['2022-02-24T22:08:00.000Z'])
    object: Optional[str] = Field(None, examples=['database'])
    parent: Optional[Parent1] = None
    properties: Optional[Properties2] = None
    title: Optional[List[TitleItem2]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'Ever Better Reading List Title',
                    'text': {'content': 'Ever Better Reading List Title', 'link': None},
                    'type': 'text',
                }
            ]
        ],
    )
    url: Optional[str] = Field(
        None, examples=['https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae']
    )


class Select8(BaseModel):
    equals: Optional[str] = Field(None, examples=['Reading'])


class Filter(BaseModel):
    property: Optional[str] = Field(None, examples=['Status'])
    select: Optional[Select8] = None


class V1DatabasesIdQueryPostRequest(BaseModel):
    filter: Optional[Filter] = None


class LastEditedBy3(BaseModel):
    id: Optional[str] = Field(None, examples=['6794760a-1f15-45cd-9c65-0dfe42f5135a'])
    object: Optional[str] = Field(None, examples=['user'])


class Parent3(BaseModel):
    database_id: Optional[str] = Field(
        None, examples=['8e2c2b76-9e1d-47d2-87b9-ed3035d607ae']
    )
    type: Optional[str] = Field(None, examples=['database_id'])


class MultiSelectItem(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['ae3a2cbe-1fc9-4376-be35-331628b34623'])
    name: Optional[str] = Field(None, examples=['Karen Swallow Prior'])


class Author2(BaseModel):
    id: Optional[str] = Field(None, examples=['qNw_'])
    multi_select: Optional[List[MultiSelectItem]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': 'ae3a2cbe-1fc9-4376-be35-331628b34623',
                    'name': 'Karen Swallow Prior',
                }
            ]
        ],
    )
    type: Optional[str] = Field(None, examples=['multi_select'])


class Link3(BaseModel):
    id: Optional[str] = Field(None, examples=['VVMi'])
    type: Optional[str] = Field(None, examples=['url'])
    url: Optional[str] = Field(
        None,
        examples=[
            'https://www.theatlantic.com/entertainment/archive/2016/03/how-jane-eyre-created-the-modern-self/460461/'
        ],
    )


class Annotations7(BaseModel):
    bold: Optional[bool] = Field(None, examples=[False])
    code: Optional[bool] = Field(None, examples=[False])
    color: Optional[str] = Field(None, examples=['default'])
    italic: Optional[bool] = Field(None, examples=[True])
    strikethrough: Optional[bool] = Field(None, examples=[False])
    underline: Optional[bool] = Field(None, examples=[False])


class Text11(BaseModel):
    content: Optional[str] = Field(None, examples=['Jane Eyre'])
    link: Optional[Any] = Field(None, examples=[None])


class TitleItem3(BaseModel):
    annotations: Optional[Annotations7] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(None, examples=['Jane Eyre'])
    text: Optional[Text11] = None
    type: Optional[str] = Field(None, examples=['text'])


class Name2(BaseModel):
    id: Optional[str] = Field(None, examples=['title'])
    title: Optional[List[TitleItem3]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': True,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'Jane Eyre',
                    'text': {'content': 'Jane Eyre', 'link': None},
                    'type': 'text',
                },
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': ' and the Invention of Self',
                    'text': {'content': ' and the Invention of Self', 'link': None},
                    'type': 'text',
                },
            ]
        ],
    )
    type: Optional[str] = Field(None, examples=['title'])


class Select9(BaseModel):
    color: Optional[str] = Field(None, examples=['red'])
    id: Optional[str] = Field(None, examples=['01f82d08-aa1f-4884-a4e0-3bc32f909ec4'])
    name: Optional[str] = Field(None, examples=['The Atlantic'])


class Publisher2(BaseModel):
    id: Optional[str] = Field(None, examples=['%3E%24Pb'])
    select: Optional[Select9] = None
    type: Optional[str] = Field(None, examples=['select'])


class Date(BaseModel):
    end: Optional[Any] = Field(None, examples=[None])
    start: Optional[str] = Field(None, examples=['2016-10-03'])
    time_zone: Optional[Any] = Field(None, examples=[None])


class PublishingReleaseDate2(BaseModel):
    date: Optional[Date] = None
    id: Optional[str] = Field(None, examples=['%3Fex%2B'])
    type: Optional[str] = Field(None, examples=['date'])


class Read2(BaseModel):
    checkbox: Optional[bool] = Field(None, examples=[False])
    id: Optional[str] = Field(None, examples=['_MWJ'])
    type: Optional[str] = Field(None, examples=['checkbox'])


class Select10(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['66d3d050-086c-4a91-8c56-d55dc67e7789'])
    name: Optional[str] = Field(None, examples=['⭐️⭐️'])


class Score52(BaseModel):
    id: Optional[str] = Field(None, examples=[')Y7%22'])
    select: Optional[Select10] = None
    type: Optional[str] = Field(None, examples=['select'])


class Select11(BaseModel):
    color: Optional[str] = Field(None, examples=['red'])
    id: Optional[str] = Field(None, examples=['5925ba22-0126-4b58-90c7-b8bbb2c3c895'])
    name: Optional[str] = Field(None, examples=['Reading'])


class Status2(BaseModel):
    id: Optional[str] = Field(None, examples=['%60zz5'])
    select: Optional[Select11] = None
    type: Optional[str] = Field(None, examples=['select'])


class Summary2(BaseModel):
    id: Optional[str] = Field(None, examples=['%3F%5C25'])
    rich_text: Optional[List] = Field(None, examples=[[]])
    type: Optional[str] = Field(None, examples=['rich_text'])


class Select12(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['9cc30548-59d6-4cd3-94bc-d234081525c4'])
    name: Optional[str] = Field(None, examples=['Essay Resource'])


class Type2(BaseModel):
    id: Optional[str] = Field(None, examples=['%2F7eo'])
    select: Optional[Select12] = None
    type: Optional[str] = Field(None, examples=['select'])


class Properties3(BaseModel):
    Author: Optional[Author2] = None
    Link: Optional[Link3] = None
    Name: Optional[Name2] = None
    Publisher: Optional[Publisher2] = None
    Publishing_Release_Date: Optional[PublishingReleaseDate2] = Field(
        None, alias='Publishing/Release Date'
    )
    Read: Optional[Read2] = None
    Score__5: Optional[Score52] = Field(None, alias='Score /5')
    Status: Optional[Status2] = None
    Summary: Optional[Summary2] = None
    Type: Optional[Type2] = None


class Result2(BaseModel):
    archived: Optional[bool] = Field(None, examples=[False])
    cover: Optional[Any] = Field(None, examples=[None])
    created_by: Optional[CreatedBy2] = None
    created_time: Optional[str] = Field(None, examples=['2021-04-27T20:38:00.000Z'])
    icon: Optional[Any] = Field(None, examples=[None])
    id: Optional[str] = Field(None, examples=['557ef501-bfdb-4586-918e-4434f31bca8c'])
    last_edited_by: Optional[LastEditedBy3] = None
    last_edited_time: Optional[str] = Field(None, examples=['2021-04-27T20:38:00.000Z'])
    object: Optional[str] = Field(None, examples=['page'])
    parent: Optional[Parent3] = None
    properties: Optional[Properties3] = None
    url: Optional[str] = Field(
        None,
        examples=[
            'https://www.notion.so/Jane-Eyre-and-the-Invention-of-Self-557ef501bfdb4586918e4434f31bca8c'
        ],
    )


class V1DatabasesIdQueryPostResponse(BaseModel):
    has_more: Optional[bool] = Field(None, examples=[False])
    next_cursor: Optional[Any] = Field(None, examples=[None])
    object: Optional[str] = Field(None, examples=['list'])
    results: Optional[List[Result2]] = Field(
        None,
        examples=[
            [
                {
                    'archived': False,
                    'cover': None,
                    'created_by': {
                        'id': '6794760a-1f15-45cd-9c65-0dfe42f5135a',
                        'object': 'user',
                    },
                    'created_time': '2021-04-27T20:38:00.000Z',
                    'icon': None,
                    'id': '557ef501-bfdb-4586-918e-4434f31bca8c',
                    'last_edited_by': {
                        'id': '6794760a-1f15-45cd-9c65-0dfe42f5135a',
                        'object': 'user',
                    },
                    'last_edited_time': '2021-04-27T20:38:00.000Z',
                    'object': 'page',
                    'parent': {
                        'database_id': '8e2c2b76-9e1d-47d2-87b9-ed3035d607ae',
                        'type': 'database_id',
                    },
                    'properties': {
                        'Author': {
                            'id': 'qNw_',
                            'multi_select': [
                                {
                                    'color': 'default',
                                    'id': 'ae3a2cbe-1fc9-4376-be35-331628b34623',
                                    'name': 'Karen Swallow Prior',
                                }
                            ],
                            'type': 'multi_select',
                        },
                        'Link': {
                            'id': 'VVMi',
                            'type': 'url',
                            'url': 'https://www.theatlantic.com/entertainment/archive/2016/03/how-jane-eyre-created-the-modern-self/460461/',
                        },
                        'Name': {
                            'id': 'title',
                            'title': [
                                {
                                    'annotations': {
                                        'bold': False,
                                        'code': False,
                                        'color': 'default',
                                        'italic': True,
                                        'strikethrough': False,
                                        'underline': False,
                                    },
                                    'href': None,
                                    'plain_text': 'Jane Eyre',
                                    'text': {'content': 'Jane Eyre', 'link': None},
                                    'type': 'text',
                                },
                                {
                                    'annotations': {
                                        'bold': False,
                                        'code': False,
                                        'color': 'default',
                                        'italic': False,
                                        'strikethrough': False,
                                        'underline': False,
                                    },
                                    'href': None,
                                    'plain_text': ' and the Invention of Self',
                                    'text': {
                                        'content': ' and the Invention of Self',
                                        'link': None,
                                    },
                                    'type': 'text',
                                },
                            ],
                            'type': 'title',
                        },
                        'Publisher': {
                            'id': '%3E%24Pb',
                            'select': {
                                'color': 'red',
                                'id': '01f82d08-aa1f-4884-a4e0-3bc32f909ec4',
                                'name': 'The Atlantic',
                            },
                            'type': 'select',
                        },
                        'Publishing/Release Date': {
                            'date': {
                                'end': None,
                                'start': '2016-10-03',
                                'time_zone': None,
                            },
                            'id': '%3Fex%2B',
                            'type': 'date',
                        },
                        'Read': {'checkbox': False, 'id': '_MWJ', 'type': 'checkbox'},
                        'Score /5': {
                            'id': ')Y7%22',
                            'select': {
                                'color': 'default',
                                'id': '66d3d050-086c-4a91-8c56-d55dc67e7789',
                                'name': '⭐️⭐️',
                            },
                            'type': 'select',
                        },
                        'Status': {
                            'id': '%60zz5',
                            'select': {
                                'color': 'red',
                                'id': '5925ba22-0126-4b58-90c7-b8bbb2c3c895',
                                'name': 'Reading',
                            },
                            'type': 'select',
                        },
                        'Summary': {
                            'id': '%3F%5C25',
                            'rich_text': [],
                            'type': 'rich_text',
                        },
                        'Type': {
                            'id': '%2F7eo',
                            'select': {
                                'color': 'default',
                                'id': '9cc30548-59d6-4cd3-94bc-d234081525c4',
                                'name': 'Essay Resource',
                            },
                            'type': 'select',
                        },
                    },
                    'url': 'https://www.notion.so/Jane-Eyre-and-the-Invention-of-Self-557ef501bfdb4586918e4434f31bca8c',
                },
                {
                    'archived': False,
                    'cover': None,
                    'created_by': {
                        'id': '6794760a-1f15-45cd-9c65-0dfe42f5135a',
                        'object': 'user',
                    },
                    'created_time': '2021-04-27T20:38:00.000Z',
                    'icon': None,
                    'id': 'a1712d54-53e4-4893-a69d-4d581cd2c845',
                    'last_edited_by': {
                        'id': '92a680bb-6970-4726-952b-4f4c03bff617',
                        'object': 'user',
                    },
                    'last_edited_time': '2021-05-12T06:07:00.000Z',
                    'object': 'page',
                    'parent': {
                        'database_id': '8e2c2b76-9e1d-47d2-87b9-ed3035d607ae',
                        'type': 'database_id',
                    },
                    'properties': {
                        'Author': {
                            'id': 'qNw_',
                            'multi_select': [
                                {
                                    'color': 'default',
                                    'id': '833e2c78-35ed-4601-badc-50c323341d76',
                                    'name': 'Kara Swisher',
                                }
                            ],
                            'type': 'multi_select',
                        },
                        'Link': {
                            'id': 'VVMi',
                            'type': 'url',
                            'url': 'https://www.nytimes.com/2018/10/21/opinion/who-will-teach-silicon-valley-to-be-ethical.html',
                        },
                        'Name': {
                            'id': 'title',
                            'title': [
                                {
                                    'annotations': {
                                        'bold': False,
                                        'code': False,
                                        'color': 'default',
                                        'italic': False,
                                        'strikethrough': False,
                                        'underline': False,
                                    },
                                    'href': None,
                                    'plain_text': 'Who Will Teach Silicon Valley to Be Ethical? ',
                                    'text': {
                                        'content': 'Who Will Teach Silicon Valley to Be Ethical? ',
                                        'link': None,
                                    },
                                    'type': 'text',
                                }
                            ],
                            'type': 'title',
                        },
                        'Publisher': {
                            'id': '%3E%24Pb',
                            'select': {
                                'color': 'default',
                                'id': 'c5ee409a-f307-4176-99ee-6e424fa89afa',
                                'name': 'NYT',
                            },
                            'type': 'select',
                        },
                        'Publishing/Release Date': {
                            'date': {
                                'end': None,
                                'start': '2018-10-21',
                                'time_zone': None,
                            },
                            'id': '%3Fex%2B',
                            'type': 'date',
                        },
                        'Read': {'checkbox': True, 'id': '_MWJ', 'type': 'checkbox'},
                        'Score /5': {
                            'id': ')Y7%22',
                            'select': {
                                'color': 'default',
                                'id': 'b7307e35-c80a-4cb5-bb6b-6054523b394a',
                                'name': '⭐️⭐️⭐️⭐️',
                            },
                            'type': 'select',
                        },
                        'Status': {
                            'id': '%60zz5',
                            'select': {
                                'color': 'red',
                                'id': '5925ba22-0126-4b58-90c7-b8bbb2c3c895',
                                'name': 'Reading',
                            },
                            'type': 'select',
                        },
                        'Summary': {
                            'id': '%3F%5C25',
                            'rich_text': [
                                {
                                    'annotations': {
                                        'bold': False,
                                        'code': False,
                                        'color': 'default',
                                        'italic': False,
                                        'strikethrough': False,
                                        'underline': False,
                                    },
                                    'href': None,
                                    'plain_text': 'Some think chief ethics officers could help technology companies navigate political and social questions.',
                                    'text': {
                                        'content': 'Some think chief ethics officers could help technology companies navigate political and social questions.',
                                        'link': None,
                                    },
                                    'type': 'text',
                                }
                            ],
                            'type': 'rich_text',
                        },
                        'Type': {
                            'id': '%2F7eo',
                            'select': {
                                'color': 'default',
                                'id': 'f96d0d0a-5564-4a20-ab15-5f040d49759e',
                                'name': 'Article',
                            },
                            'type': 'select',
                        },
                    },
                    'url': 'https://www.notion.so/Who-Will-Teach-Silicon-Valley-to-Be-Ethical-a1712d5453e44893a69d4d581cd2c845',
                },
            ]
        ],
    )


class Icon(BaseModel):
    emoji: Optional[str] = Field(None, examples=['📕'])
    type: Optional[str] = Field(None, examples=['emoji'])


class LastEditedBy4(BaseModel):
    id: Optional[str] = Field(None, examples=['92a680bb-6970-4726-952b-4f4c03bff617'])
    object: Optional[str] = Field(None, examples=['user'])


class Parent4(BaseModel):
    page_id: Optional[str] = Field(
        None, examples=['c1218692-102d-4b47-ab38-c21900b3557b']
    )
    type: Optional[str] = Field(None, examples=['page_id'])


class Annotations8(BaseModel):
    bold: Optional[bool] = Field(None, examples=[False])
    code: Optional[bool] = Field(None, examples=[False])
    color: Optional[str] = Field(None, examples=['default'])
    italic: Optional[bool] = Field(None, examples=[False])
    strikethrough: Optional[bool] = Field(None, examples=[False])
    underline: Optional[bool] = Field(None, examples=[False])


class Text12(BaseModel):
    content: Optional[str] = Field(None, examples=['Reading List'])
    link: Optional[Any] = Field(None, examples=[None])


class TitleItem4(BaseModel):
    annotations: Optional[Annotations8] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(None, examples=['Reading List'])
    text: Optional[Text12] = None
    type: Optional[str] = Field(None, examples=['text'])


class Title(BaseModel):
    id: Optional[str] = Field(None, examples=['title'])
    title: Optional[List[TitleItem4]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'Reading List',
                    'text': {'content': 'Reading List', 'link': None},
                    'type': 'text',
                }
            ]
        ],
    )
    type: Optional[str] = Field(None, examples=['title'])


class Properties4(BaseModel):
    title: Optional[Title] = None


class V1PagesIdGetResponse(BaseModel):
    archived: Optional[bool] = Field(None, examples=[False])
    cover: Optional[Any] = Field(None, examples=[None])
    created_by: Optional[CreatedBy2] = None
    created_time: Optional[str] = Field(None, examples=['2021-04-27T20:38:00.000Z'])
    icon: Optional[Icon] = None
    id: Optional[str] = Field(None, examples=['c4d39556-6364-46a1-8a61-ebbb668f7445'])
    last_edited_by: Optional[LastEditedBy4] = None
    last_edited_time: Optional[str] = Field(None, examples=['2022-03-02T05:22:00.000Z'])
    object: Optional[str] = Field(None, examples=['page'])
    parent: Optional[Parent4] = None
    properties: Optional[Properties4] = None
    url: Optional[str] = Field(
        None,
        examples=[
            'https://www.notion.so/Reading-List-c4d39556636446a18a61ebbb668f7445'
        ],
    )


class Select13(BaseModel):
    name: Optional[str] = Field(None, examples=['Reading'])


class Status3(BaseModel):
    select: Optional[Select13] = None


class Properties5(BaseModel):
    Status: Optional[Status3] = None


class V1PagesIdPatchRequest(BaseModel):
    properties: Optional[Properties5] = None


class Parent5(BaseModel):
    database_id: Optional[str] = Field(
        None, examples=['8e2c2b76-9e1d-47d2-87b9-ed3035d607ae']
    )
    type: Optional[str] = Field(None, examples=['database_id'])


class MultiSelectItem1(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['833e2c78-35ed-4601-badc-50c323341d76'])
    name: Optional[str] = Field(None, examples=['Kara Swisher'])


class Author3(BaseModel):
    id: Optional[str] = Field(None, examples=['qNw_'])
    multi_select: Optional[List[MultiSelectItem1]] = Field(
        None,
        examples=[
            [
                {
                    'color': 'default',
                    'id': '833e2c78-35ed-4601-badc-50c323341d76',
                    'name': 'Kara Swisher',
                }
            ]
        ],
    )
    type: Optional[str] = Field(None, examples=['multi_select'])


class Link4(BaseModel):
    id: Optional[str] = Field(None, examples=['VVMi'])
    type: Optional[str] = Field(None, examples=['url'])
    url: Optional[str] = Field(
        None,
        examples=[
            'https://www.nytimes.com/2018/10/21/opinion/who-will-teach-silicon-valley-to-be-ethical.html'
        ],
    )


class Text13(BaseModel):
    content: Optional[str] = Field(
        None, examples=['Who Will Teach Silicon Valley to Be Ethical? ']
    )
    link: Optional[Any] = Field(None, examples=[None])


class TitleItem5(BaseModel):
    annotations: Optional[Annotations8] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(
        None, examples=['Who Will Teach Silicon Valley to Be Ethical? ']
    )
    text: Optional[Text13] = None
    type: Optional[str] = Field(None, examples=['text'])


class Name3(BaseModel):
    id: Optional[str] = Field(None, examples=['title'])
    title: Optional[List[TitleItem5]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'Who Will Teach Silicon Valley to Be Ethical? ',
                    'text': {
                        'content': 'Who Will Teach Silicon Valley to Be Ethical? ',
                        'link': None,
                    },
                    'type': 'text',
                }
            ]
        ],
    )
    type: Optional[str] = Field(None, examples=['title'])


class Select14(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['c5ee409a-f307-4176-99ee-6e424fa89afa'])
    name: Optional[str] = Field(None, examples=['NYT'])


class Publisher3(BaseModel):
    id: Optional[str] = Field(None, examples=['>$Pb'])
    select: Optional[Select14] = None
    type: Optional[str] = Field(None, examples=['select'])


class Date1(BaseModel):
    end: Optional[Any] = Field(None, examples=[None])
    start: Optional[str] = Field(None, examples=['2018-10-21'])


class PublishingReleaseDate3(BaseModel):
    date: Optional[Date1] = None
    id: Optional[str] = Field(None, examples=['?ex+'])
    type: Optional[str] = Field(None, examples=['date'])


class Read3(BaseModel):
    checkbox: Optional[bool] = Field(None, examples=[True])
    id: Optional[str] = Field(None, examples=['_MWJ'])
    type: Optional[str] = Field(None, examples=['checkbox'])


class Select15(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['b7307e35-c80a-4cb5-bb6b-6054523b394a'])
    name: Optional[str] = Field(None, examples=['⭐️⭐️⭐️⭐️'])


class Score53(BaseModel):
    id: Optional[str] = Field(None, examples=[')Y7"'])
    select: Optional[Select15] = None
    type: Optional[str] = Field(None, examples=['select'])


class Select16(BaseModel):
    color: Optional[str] = Field(None, examples=['red'])
    id: Optional[str] = Field(None, examples=['5925ba22-0126-4b58-90c7-b8bbb2c3c895'])
    name: Optional[str] = Field(None, examples=['Reading'])


class Status4(BaseModel):
    id: Optional[str] = Field(None, examples=['`zz5'])
    select: Optional[Select16] = None
    type: Optional[str] = Field(None, examples=['select'])


class Text14(BaseModel):
    content: Optional[str] = Field(
        None,
        examples=[
            'Some think chief ethics officers could help technology companies navigate political and social questions.'
        ],
    )
    link: Optional[Any] = Field(None, examples=[None])


class RichTextItem3(BaseModel):
    annotations: Optional[Annotations8] = None
    href: Optional[Any] = Field(None, examples=[None])
    plain_text: Optional[str] = Field(
        None,
        examples=[
            'Some think chief ethics officers could help technology companies navigate political and social questions.'
        ],
    )
    text: Optional[Text14] = None
    type: Optional[str] = Field(None, examples=['text'])


class Summary3(BaseModel):
    id: Optional[str] = Field(None, examples=['?\\25'])
    rich_text: Optional[List[RichTextItem3]] = Field(
        None,
        examples=[
            [
                {
                    'annotations': {
                        'bold': False,
                        'code': False,
                        'color': 'default',
                        'italic': False,
                        'strikethrough': False,
                        'underline': False,
                    },
                    'href': None,
                    'plain_text': 'Some think chief ethics officers could help technology companies navigate political and social questions.',
                    'text': {
                        'content': 'Some think chief ethics officers could help technology companies navigate political and social questions.',
                        'link': None,
                    },
                    'type': 'text',
                }
            ]
        ],
    )
    type: Optional[str] = Field(None, examples=['rich_text'])


class Select17(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['f96d0d0a-5564-4a20-ab15-5f040d49759e'])
    name: Optional[str] = Field(None, examples=['Article'])


class Type3(BaseModel):
    id: Optional[str] = Field(None, examples=['/7eo'])
    select: Optional[Select17] = None
    type: Optional[str] = Field(None, examples=['select'])


class Properties6(BaseModel):
    Author: Optional[Author3] = None
    Link: Optional[Link4] = None
    Name: Optional[Name3] = None
    Publisher: Optional[Publisher3] = None
    Publishing_Release_Date: Optional[PublishingReleaseDate3] = Field(
        None, alias='Publishing/Release Date'
    )
    Read: Optional[Read3] = None
    Score__5: Optional[Score53] = Field(None, alias='Score /5')
    Status: Optional[Status4] = None
    Summary: Optional[Summary3] = None
    Type: Optional[Type3] = None


class V1PagesIdPatchResponse(BaseModel):
    archived: Optional[bool] = Field(None, examples=[False])
    created_time: Optional[str] = Field(None, examples=['2021-04-27T20:38:19.437Z'])
    id: Optional[str] = Field(None, examples=['a1712d54-53e4-4893-a69d-4d581cd2c845'])
    last_edited_time: Optional[str] = Field(None, examples=['2021-04-28T23:12:53.160Z'])
    object: Optional[str] = Field(None, examples=['page'])
    parent: Optional[Parent5] = None
    properties: Optional[Properties6] = None


class Select18(BaseModel):
    color: Optional[str] = Field(None, examples=['default'])
    id: Optional[str] = Field(None, examples=['5c944de7-3f4b-4567-b3a1-fa2c71c540b6'])
    name: Optional[str] = Field(None, examples=['⭐️⭐️⭐️⭐️⭐️'])


class V1PagesPageIdPropertiesPropertyIdGetResponse(BaseModel):
    object: Optional[str] = Field(None, examples=['property_item'])
    select: Optional[Select18] = None
    type: Optional[str] = Field(None, examples=['select'])


class V1UsersIdGetRequest(BaseModel):
    pass


class Person(BaseModel):
    email: Optional[str] = Field(None, examples=['XXXXXXXXXXX'])


class V1UsersIdGetResponse(BaseModel):
    avatar_url: Optional[Any] = Field(None, examples=[None])
    id: Optional[str] = Field(None, examples=['6794760a-1f15-45cd-9c65-0dfe42f5135a'])
    name: Optional[str] = Field(None, examples=['Aman Gupta'])
    object: Optional[str] = Field(None, examples=['user'])
    person: Optional[Person] = None
    type: Optional[str] = Field(None, examples=['person'])
