# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:41:53+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header
from starlette.requests import Request

from models import (
    V1BlocksIdChildrenGetResponse,
    V1BlocksIdChildrenPatchRequest,
    V1BlocksIdChildrenPatchResponse,
    V1BlocksIdDeleteResponse,
    V1BlocksIdGetResponse,
    V1BlocksIdPatchRequest,
    V1BlocksIdPatchResponse,
    V1CommentsGetResponse,
    V1DatabasesIdGetResponse,
    V1DatabasesIdPatchRequest,
    V1DatabasesIdPatchResponse,
    V1DatabasesIdQueryPostRequest,
    V1DatabasesIdQueryPostResponse,
    V1PagesIdGetResponse,
    V1PagesIdPatchRequest,
    V1PagesIdPatchResponse,
    V1PagesPageIdPropertiesPropertyIdGetResponse,
    V1UsersIdGetResponse,
)

app = MCPProxy(
    contact={},
    description="Hello and welcome!\n\nTo make use of this API collection collection as it's written, please duplicate [this database template](https://www.notion.so/8e2c2b769e1d47d287b9ed3035d607ae?v=dc1b92875fb94f10834ba8d36549bd2a).\n\n[Create an integration](https://www.notion.so/my-integrations) to retrieve an API token, add your database and page ID's as variables in the collection, and start making your requests!\n\nFor our full documentation, including sample integrations and guides, visit [developers.notion.com](developers.notion.com)\n\nNeed more help? Join our [developer community on Slack](https://join.slack.com/t/notiondevs/shared_invite/zt-lkrnk74h-YmPRroySRFGiqgjI193AqA/)",
    title='Notion API',
    version='1.0.0',
    servers=[{'url': 'https://api.notion.com'}],
)


@app.delete(
    '/v1/blocks/{id}', description=""" Delete a block """, tags=['block_operations']
)
def delete_a_block(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'), id: str = ...
):
    """
    Delete a block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/blocks/{id}', description=""" Retrieve a block """, tags=['block_operations']
)
def retrieve_a_block(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'), id: str = ...
):
    """
    Retrieve a block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v1/blocks/{id}',
    description=""" This endpoint allows you to update block content. [See Full Documentation](https://developers.notion.com/reference/update-a-block) """,
    tags=['block_operations'],
)
def update_a_block(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'),
    id: str = ...,
    body: V1BlocksIdPatchRequest = None,
):
    """
    Update a block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/blocks/{id}/children',
    description=""" Retrieve block children """,
    tags=['block_operations'],
)
def retrieve_block_children(
    page_size: Optional[str] = None,
    notion__version: Optional[str] = Header(None, alias='Notion-Version'),
    id: str = ...,
):
    """
    Retrieve block children
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v1/blocks/{id}/children',
    description=""" Append block children """,
    tags=['block_operations'],
)
def append_block_children(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'),
    id: str = ...,
    body: V1BlocksIdChildrenPatchRequest = None,
):
    """
    Append block children
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/comments',
    description=""" Retrieve a user object using the ID specified in the request path. """,
    tags=['block_operations'],
)
def retrieve_comments(
    block_id: Optional[str] = None,
    page_size: Optional[str] = None,
    notion__version: Optional[str] = Header(None, alias='Notion-Version'),
    request: Request = ...,
):
    """
    Retrieve comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/databases/{id}',
    description=""" Retrieves a database object using the ID specified in the request path.  """,
    tags=['database_operations'],
)
def retrieve_a_database(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'), id: str = ...
):
    """
    Retrieve a database
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v1/databases/{id}',
    description=""" Update a database """,
    tags=['database_operations'],
)
def update_a_database(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'),
    id: str = ...,
    body: V1DatabasesIdPatchRequest = None,
):
    """
    Update a database
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/databases/{id}/query',
    description=""" Query a database """,
    tags=['database_operations'],
)
def query_a_database(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'),
    id: str = ...,
    body: V1DatabasesIdQueryPostRequest = None,
):
    """
    Query a database
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/pages/{id}',
    description=""" Retrieves a Page object using the ID in the request path. This endpoint exposes page properties, not page content.  """,
    tags=['page_operations'],
)
def retrieve_a_page(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'),
    field_: Optional[str] = Header(None, alias=''),
    id: str = ...,
):
    """
    Retrieve a Page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v1/pages/{id}',
    description=""" Updates a page by setting the values of any properties specified in the JSON body of the request. Properties not updated via parameters will remain unchanged.  """,
    tags=['page_operations'],
)
def update_page_properties(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'),
    id: str = ...,
    body: V1PagesIdPatchRequest = None,
):
    """
    Update Page properties
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/pages/{page_id}/properties/{property_id}',
    description=""" Retrieve a Page Property Item """,
    tags=['page_operations'],
)
def retrieve_a_page_property_item(page_id: str, property_id: str = ...):
    """
    Retrieve a Page Property Item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/users/{id}',
    description=""" Retrieve a user object using the ID specified in the request path. """,
    tags=['user_details_access'],
)
def retrieve_a_user(
    notion__version: Optional[str] = Header(None, alias='Notion-Version'),
    id: str = ...,
    request: Request = ...,
):
    """
    Retrieve a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
